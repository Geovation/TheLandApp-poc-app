/**
 * Handles the creation and management of projects.
 */
(function() {
  'use strict';

  angular
    .module('LandApp')
    .factory('projectService', projectService);

  /** @ngInject */
  function projectService($q, $timeout,
    firebaseReferenceService, messageService, olLayerGroupService, olUserLayerService, activeProjectService) {
    var service = {
      init: init,
      getProjectList: function() { return _projectList; },
      createProject: createProject,
      toggleProject: toggleProject,
      getActiveProject: getActiveProject,
      getBaseFarmProject: getBaseFarmProject
    };

    var _projectList = {};

    return service;

    /////////////////////////// PUBLIC ///////////////////////////

    /**
     * Initializes the service by loading project details from the db.
     */
    function init() {
      firebaseReferenceService
        .getUserProjectsRef()
        .on("value", function(projectList) {
          _projectList = {};

          if (projectList.exists()) {
            _projectList = projectList.val();

            angular.forEach(_projectList, function(value, key) {
              value.key = key;
            });

            toggleProject(getActiveProject() || getBaseFarmProject());
          }
        });
    }

    /**
     * Toggles a project's visiblity.
     *
     * @param {Object} toggledProject Project to toggle
     */
    function toggleProject(toggledProject) {
      angular.forEach(_projectList, function(project) {
        project.isActive = false;
      });

      toggledProject.isActive = true;
      activeProjectService.setActiveProjectKey(toggledProject.key);

      // show the ol group
      olLayerGroupService.toggleGroupVisibility(toggledProject.key, toggledProject.isActive);
    }

    /**
     * Returns the currently active project.
     * @return {Object} Project object
     */
    function getActiveProject() {
      return _projectList[activeProjectService.getActiveProjectKey()];
    }

    /**
     * Returns the base farm project.
     * @return {Object} Project object
     */
    function getBaseFarmProject() {
      return _projectList.myFarm;
    }

    /**
     * Creates a new named project.
     *
     * @param  {String}   projectName       Name of the new project
     * @param  {Bool}     isBaseFarmProject Whether this is a base farm project
     * @return {Promise}                    Promise object
     */
    function createProject(projectName, isBaseFarmProject) {
      var deferred = $q.defer();

      if (isBaseFarmProject && getBaseFarmProject()) {
        deferred.reject("A base farm layer already exists");
      } else {
        var payload = {
          projectName: projectName
        };

        var projectListRef = firebaseReferenceService.getUserProjectsRef();

        // the base farm project has a static key (myFarm)
        // every other project has a random key generated by Firebase
        var projectRef = isBaseFarmProject ? projectListRef.child("myFarm") : projectListRef.push();

        // create layers and group for new project
        projectRef.set(payload)
          .then(function() {
            projectRef.once("value", olUserLayerService.createLayers);
            deferred.resolve(projectRef.key());
          })
          .catch(function(error) {
            deferred.reject(error);
            messageService.error(error);
          });
      }

      return deferred.promise;
    }
  }

})();
